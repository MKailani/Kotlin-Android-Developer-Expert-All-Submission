package com.one.submission.dicoding.myfootballapp.presenter.fragmentimport com.nhaarman.mockito_kotlin.argumentCaptorimport com.nhaarman.mockito_kotlin.eqimport com.one.submission.dicoding.myfootballapp.network.RepositoryApiimport com.one.submission.dicoding.myfootballapp.network.RepositoryCallbackApiimport com.one.submission.dicoding.myfootballapp.network.response.ResponseMatchFootballimport com.one.submission.dicoding.myfootballapp.view.fragment.iview.CommonViewimport org.junit.Beforeimport org.junit.Testimport org.junit.runner.RunWithimport org.mockito.Mockimport org.mockito.Mockitoimport org.mockito.MockitoAnnotationsimport org.mockito.junit.MockitoJUnitRunner/** * Dicoding Academy * * Submission 4 * Kotlin Android Developer Expert (KADE) * * Created by kheys on 06/02/19. */@RunWith(MockitoJUnitRunner::class)class NextMatchPresenterTest {    @Mock    private lateinit var mView: CommonView    @Mock    private lateinit var mPresenter: NextMatchPresenter    @Mock    private lateinit var repositoryApi: RepositoryApi    @Mock    private lateinit var responseMatchFootball: ResponseMatchFootball    @Before    fun setUp() {        MockitoAnnotations.initMocks(this)        mPresenter = NextMatchPresenter(mView, repositoryApi)    }    @Test    fun doNextMatchLoadedTest() {        val id = "4328"        mPresenter.doNextMatch(id)        argumentCaptor<RepositoryCallbackApi<ResponseMatchFootball?>>().apply {            Mockito.verify(repositoryApi).getNextMatch(eq(id), capture())            firstValue.onDataLoaded(responseMatchFootball)        }        Mockito.verify(mView).showLoading()        Mockito.verify(mView).onDataLoaded(responseMatchFootball)        Mockito.verify(mView).dismissLoading()    }    @Test    fun doNextMatchErrorTest() {        val id = ""        mPresenter.doNextMatch(id)        argumentCaptor<RepositoryCallbackApi<ResponseMatchFootball?>>().apply {            Mockito.verify(repositoryApi).getNextMatch(eq(id), capture())            firstValue.onDataError()        }        Mockito.verify(mView).showLoading()        Mockito.verify(mView).onDataError()        Mockito.verify(mView).dismissLoading()    }}